; STATUS: incomplete
; Note: This program may, for large numbers, pause its execution and warn of
; a possible infinite loop. This can be bypassed by typing z and hitting enter.

; Let's say that we want to, in LCC Assembly, read, write, add, and subtract 
; 32 bit numbers. The benefits to this could include things such as 
; representation of 32 floating point, as well as larger numbers. This could
; also scale up to 64 bit numbers, and so on.

; PROGRAM 1: add two large unsigned numbers & print 
;            resulting 32 digit number
;
; This version of the program uses a different mechanism
; to detect when it is on the last loop.
; The method is uses is to count up the number of 0 results
; from the division of the first and second halves. When the
; combined addition of 0 results equals 2, we know that we
; are on the last loop.
startup:        bl main
                halt

;

; arg1 is x ; x is the dividend 
; arg2 is y ; y is the divisor
; return (r0) is quotient (result)
; pollutes r1
div:            push lr
                push fp
                mov fp, sp
                mov r0, 0
                push r0 ; (fp-1 is the quotient)
                ldr r0, fp, 2 ; (fp+2 is the dividend)
                cmp r0, 0
                brgt @L0div ; if the dividend is positive
                bre @L1div ; if the dividend is 0
                mov r0, 1 ; bool isUnsigned. we have an unsigned large number. true for bigger
                push r0 ; (fp-2 is the bool isUnsigned)
    @L0div:     ldr r0, fp, 2 ; load dividend
                ldr r1, fp, 3 ; load divisor, (fp+3 is the divisor)
                sub r0, r0, r1 ; subtract the divisor from the dividend
                str r0, fp, 2 ; store the new dividend
                ldr r0, fp, -2 ; load bool isUnsigned
                cmp r0, 1    ; if original number is large enough to be negative
                bre @isLargeDiv
                ldr r0, fp, 2 ; load dividend
                cmp r0, 0
                brn @L1div
    @isLargeDiv:   ldr r0, fp, 2 ; load dividend
                cmp r0, 0           ; check if current number is now positive. if so set r3 to 0
                brlt @stepoverDiv
                ldr r0, fp, -2 ; load bool isUnsigned
                mov r0, 0           ; toggle isUnsigned off
                str r0, fp, -2 ; store the new bool isUnsigned
    @stepoverDiv:  ldr r0, fp, -1 ; load quotient
                add r0, r0, 1 ; increment quotient
                str r0, fp, -1 ; store the new quotient
                br @L0div

    @L1div:     ldr r0, fp, -1 ; load quotient
                mov sp, fp
                pop fp
                pop lr
                ret

;

;; DONE: replace mod function w/ one's digit "OD" function that
;        returns the one's digit (including 0 when dividend is 0)
; arg1 is x ; x is the dividend 
; arg2 is y ; y is the divisor
; return (r0) is quotient (result)
; pollutes r1
onesDigit:      push lr
                push fp
                mov fp, sp
                mov r0, 0
                push r0 ; (fp-1 is the quotient)
                ldr r0, fp, 2 ; (fp+2 is the dividend)
                cmp r0, 0
                brgt @L0od ; if the dividend is positive
                bre @L1done ; if the dividend is 0
                mov r0, 1 ; bool isUnsigned. we have an unsigned large number. true for bigger
                push r0 ; (fp-2 is the bool isUnsigned)
    @L0od:      ldr r0, fp, 2 ; load dividend
                ldr r1, fp, 3 ; load divisor, (fp+3 is the divisor)
                sub r0, r0, r1 ; subtract the divisor from the dividend
                str r0, fp, 2 ; store the new dividend
                ldr r0, fp, -2 ; load bool isUnsigned
                cmp r0, 1    ; if original number is large enough to be negative
                bre @isLargeOd
                ldr r0, fp, 2 ; load dividend
                cmp r0, 0
                brn @L1od
    @isLargeOd: ldr r0, fp, 2 ; load dividend
                cmp r0, 0           ; check if current number is now positive. if so set r3 to 0
                brlt @stepoverOd
                ldr r0, fp, -2 ; load bool isUnsigned
                mov r0, 0           ; toggle isUnsigned off
                str r0, fp, -2 ; store the new bool isUnsigned
    @stepoverOd: ldr r0, fp, -1 ; load quotient
                add r0, r0, 1 ; increment quotient
                str r0, fp, -1 ; store the new quotient
                br @L0od

    @L1od:      ldr r0, fp, 2 ; load dividend
                ldr r1, fp, 3 ; load divisor
                add r0, r0, r1 ; add the divisor to the dividend
    @L1done:    mov sp, fp
                pop fp
                pop lr
                ret

;

; divides x by y, z times
; returns the quotient in r0
; pollutes r1
divTimes:       push lr
                push fp
                mov fp, sp

                ldr r0, fp, 4 ; load power
                sub sp, sp, 2 ; make room for the power & running quotient
                str r0, fp, -1 ; store power, now accessible at fp-1
                ldr r0, fp, 2 ; load initial dividend
                str r0, fp, -2 ; store dividend, now accessible at fp-2
                ldr r0, fp, 3 ; load initial divisor

    @L0dt:      ldr r1, fp, -1 ; load power
                cmp r1, 0
                bre @L1dt
                ldr r1, fp, -2 ; load dividend

                ;;;; reload initial divisor
                ldr r0, fp, 3 ; load initial divisor
                push r0 ; push initial divisor
                push r1

                ; ; debugging
                ; lea r0, dividing
                ; sout r0
                ; udout r1
                ; lea r0, by
                ; sout r0
                ; ldr r0, fp, 3 ; initial divisor
                ; udout r0
                ; nl
                ; ; debugging

                bl div
                add sp, sp, 2

                ; ; debugging
                ; lea r1, divNumIs
                ; sout r1
                ; udout r0
                ; nl
                ; ; debugging

                ; update quotient
                str r0, fp, -2 ; store new quotient at fp-2

                ldr r0, fp, -1 ; load power
                sub r0, r0, 1 ; dec power
                str r0, fp, -1 ; store power

                ldr r0, fp, -2 ; load OLD QUOTIENT (new divisor) into r0
                br @L0dt

    @L1dt:      ldr r0, fp, -2 ; load quotient  
                mov sp, fp
                pop fp
                pop lr
                ret

;


main:           push lr
                push fp
                mov fp, sp

                sub sp, sp, 1 ; allocate space for the carry out register (fp-1)
                sub sp, sp, 1 ; allocate space for isLastLoop register (fp-2) which counts up 
                ;               the number of div 0 results (don't forget to reset it!)
                sub sp, sp, 1 ; allocate space for the 1's place of the first half (fp-3)
                sub sp, sp, 1 ; allocate space for the 1's place of the second half (fp-4)

                ; step A: get the one's place by dividing by 10^0, then modding by 10
                mov r3, 0 ; var base divisor
                mov r4, 10 ; const mod operand
@mainLoop:
                ; lea r0, loopStartMsg
                ; sout r0
                ; nl
@L0:            
                ld r0, num32test1 + 1 ; load the first half ; TODO: fix syntax highlighting for optional spaces between label, +/- operator, and offset
                
                ; divide the first half by the base divisor r0/r3
                ;;; divide r0 by r4, r3 times
                push r3 ; (times to divide)
                push r4 ; (number to divide with)
                push r0 ; (number to divide by)
                bl divTimes
                add sp, sp, 3
                ; div result is now in r0, r1 is polluted by div function

                cmp r0, 0
                brne @L8 ; if the result is not 0, we are not on the last loop
                
                ldr r1, fp, -2 ; load last loop counter
                add r1, r1, 1 ; increment it by 1
                str r1, fp, -2 ; save last loop counter

                ; get one's digit of the first half by r0 od r4
@L8:            push r4
                push r0
                bl onesDigit
                add sp, sp, 2
                ; OD result is now in r0, r1 is polluted by mod function
                ; save the first half's 1's place to the stack (fp-3)
                str r0, fp, -3
                
                ld r0, num32test1 + 2 ; load the second half

                ; DONE: get the number of digits in the number, save it
                ; r3 is a counter for number of times we divide by 10. With this 
                ; counter we can calc and/or save the # of digits in the number
                ; udout r3
                ; nl


                ;;; divide r0 by r4, r3 times
                push r3 ; push 2 (times to divide)
                push r4 ;;;; push 4 (number to divide with)
                push r0 ; push 16 (number to divide by)
                bl divTimes
                add sp, sp, 3
                ; we have div result in r0, r1 is polluted by div function

                cmp r0, 0
                brne @L9 ; if the result is not 0, we are not on the last loop
                
                ldr r1, fp, -2 ; load last loop counter
                add r1, r1, 1 ; increment it by 1
                str r1, fp, -2 ; save last loop counter

@L9:            ; get one's digit of second half by onesDigit func r0 od r4
                push r4
                push r0
                bl onesDigit
                add sp, sp, 2
                ; we have the 1's place r2%r4 in r0, r1 is polluted by OD function
                ; save the second half's 1's place to the stack (fp-4)
                ; udout r0
                ; nl
                str r0, fp, -4

                ; print out both 1's places
                ; lea r0, firstHalfOne
                ; sout r0
                ; ldr r0, fp, -3
                ; udout r0
                ; nl
                ; lea r0, secondHalfOne
                ; sout r0
                ; ldr r0, fp, -4
                ; udout r0
                ; nl

                ;; TODO: check that this next line's logic is not brittle
                ;        eg. what happens if we try to add 1002 to 1004?
                ; load last loop counter
                ldr r1, fp, -2
                cmp r1, 2 ; if we have 2 div 0 results, we are on the last loop
                bre @L6

                mov r1, 0
                str r1, fp, -2 ; reset last loop register back to 0 to 
                               ; indicate we are NOT on last loop

@L6:            ldr r0, fp, -3 ; load both digits
                ldr r1, fp, -4
                add r0, r0, r1 ; add the 2 digits from each half
                ; load and add the carry as well
                ldr r1, fp, -1 ; load the carry out register
                add r0, r0, r1
                ; compare against 10
                cmp r0, r4
                brlt @L1 ; if less than 10, we push to the stack and reset carry out to 0
                bre @L2 ; ... else, we will need to get the 1's place, save it to the stack
                brgt @L2 ; ... and then save a 1 to a carry out register
@L1:            
                ; lea r1, debug1
                ; sout r1
                ; dout r0
                ; nl

                ; if we are on the last loop (last loop = 2) AND carry out is 0, we are done
                ; else, we push the remaining 1 digit to the stack
                ; and then we are actually done
                ldr r1, fp, -2 ; load the last loop register
                cmp r1, 2
                ; sub r1, r1, 2 ; subtract 2 from last loop register
                ; or r1, r0 ; if r1 is 0, we are on the last loop
                ; cmp r1, 0
                bre @L7 ; if we are on the last loop, we are done

                push r0 ; push the digit to the stack
                ; reset carry out to zero
@L7:            ; TODO: Q: Does the carry out need to be reset here?
                mov r0, 0
                str r0, fp, -1 ; reset the carry out register to zero

                br @L3

; get the 1's place, save to stack, and set carry out to 1
@L2:            ; get the 1's place r0 od r4
                push r4
                push r0
                bl onesDigit
                add sp, sp, 2
                ; the 1's place is now in r0, r1 is polluted by OD function

                ; lea r1, debug1
                ; sout r1
                ; dout r0
                ; nl

                push r0 ; push the digit to the stack
                ; TODO: q: do we need to reset the carry out here?
                mov r0, 0
                str r0, fp, -1 ; reset the carry out register to zero

                ; lea r1, debug2
                ; sout r1
                ; dout r0
                ; nl
@L3:
                add r3, r3, 1 ; this makes the powers of 1 to 10 to 100...

                ldr r0, fp, -2 ; load the last loop register
                cmp r0, 2
                bre @L5 ; if we are on the last loop, we are done

                br @mainLoop
@L5:            ; end of the loop
                sub r3, r3, 1 ; decrement r3 by 1 to get the number of digits
                lea r0, endOfLoopMsg
                sout r0
                nl

                ; s
                lea r0, theResultOf
                sout r0
                ld r0, num32test1 + 1
                udout r0
                lea r0, plus
                sout r0
                ld r0, num32test1 + 2
                udout r0
                lea r0, is
                sout r0
                ; udout r3
                ; nl

                ; pop and print the stack
@L10:            cmp r3, 0
                bre @L11
                pop r0
                dout r0
                sub r3, r3, 1
                br @L10
@L11:            mov sp, fp
                pop fp
                pop lr
                ret

; we save num 32 as three words, the first being the pointer to the
; num32 'struct' itself. the 1st word is the number of digits in 
; the number. The 2nd and 3rd words represent the number itself.
; the max number an unsigned 32 bit number can be is 4,294,967,295
; the number itself is divided in 2 (filling up first to the max), 
; and saved across two words

; passed tests so far: 199+9, 123+4, 123+345

num32test1:     .word 4 ; first word holds the # of placecs
                .word 4400 ; test1 ; next test: 1002 ; next test: 20000
                .word 34000 ; test1 ; next test: 1003 ; next test: 20000

num32test2:     .word 6 ; first word holds the # of placecs
                .word 65535
                .word 2

debug1:         .string "Pushing to the stack: "
debug2:         .string "Carry out is: "
loopStartMsg:   .string "Beginning of the loop"
endOfLoopMsg:   .string "Loop has ended"
firstHalfOne:   .string "1st half one's digit: "
secondHalfOne:  .string "2nd half one's digit: "
theResultOf     .string "The result of "
plus            .string " plus "
is              .string " is "