; STATUS: incomplete
; LCC Assembly program that enables the user to roll a 
; chosen number of dice of a chosen number of sides
; the program starts w/ an initial random seed input
; DONE: prompt user for random seed
; DONE: increment seed pointer to get next random number
; DONE: make sure w/ rem (mod) that seed never goes out of bounds
; TODO: functionize the random number generator seeding (takes a number, returns nothing)
; TODO: functionize the random number generator (takes nothing, returns a number in r0)
; TODO: functionize the dice rolling (takes number of dice, number of sides, returns total)

startup:        bl main
                halt

main:           push lr
                push fp
                mov fp, sp

                ; prompt user for random seed
                lea r0, prompt1
                sout r0
                din r0
                mov r1, 10 ; prevent seed from going out of bounds
                rem r0, r1 ; by taking the remainder of the input
                ; note: this seed becomes the array pointer for the random number array

                ; prompt user for the number of sides on the dice
    @L2:        lea r1, prompt3
                sout r1
                din r1

                ; if user enters 0 or a negative number, prompt them again
                cmp r1, 0
                brgt @L3
                lea r2, invalFaceCnt
                sout r2
                nl
                bre @L2
                brlt @L2

    @L3:        st r1, currentCap

    @L0:        lea r1, testNums2
                add r1, r1, r0 ; offset the array pointer by the counter
                ldr r1, r1, 0 ; deref the array pointer to get a value from the array
                lea r2, youRolledA
                sout r2

                ; try using rem to get random numbers under a given cap
                ; mov r2, 4
                ld r2, currentCap
                rem r1, r2

                ; add 1 to offset the 0-based array to get a 1-based num result
                add r1, r1, 1

                dout r1
                nl

                ; query the user do they want another die roll
                lea r2, againQ
                sout r2
                din r1
                cmp r1, 1
                brne @L1

                add r0, r0, 1 ; increment random number pointer to the next index
                mov r1, 10 ; prevent pointer from going out of bounds
                rem r0, r1 ; by taking the remainder of it divided by the array size
                br @L0

    @L1:        mov sp, fp
                pop fp
                pop lr
                ret

currentCap:     .word 1
prompt1:        .string "Enter a random seed # from 0 to 99: "
prompt2:        .string "Enter the number of dice to roll: "
prompt3:        .string "Enter the number of die sides: " 
youRolledA:     .string "You rolled a "
againQ:         .string "Roll another? (1=yes, 0=no): "
invalFaceCnt:   .string "Please enter a positive number"

testNums:       .word 1
                .word 2
                .word 3
                .word 4
                .word 5
                .word 6

testNums2:      .word 0
                .word 1
                .word 2
                .word 3
                .word 4
                .word 5
                .word 6
                .word 7
                .word 8
                .word 9

nums:           .word 96
                .word 16
                .word 83
                .word 58
                .word 81
                .word 24
                .word 88
                .word 85
                .word 66
                .word 15
                .word 31
                .word 7
                .word 29
                .word 19
                .word 97
                .word 52
                .word 75
                .word 47
                .word 62
                .word 89
                .word 3
                .word 5
                .word 13
                .word 11
                .word 73
                .word 44
                .word 14
                .word 57
                .word 9
                .word 30
                .word 77
                .word 35
                .word 4
                .word 74
                .word 23
                .word 28
                .word 72
                .word 86
                .word 70
                .word 6
                .word 22
                .word 51
                .word 94
                .word 32
                .word 48
                .word 39
                .word 54
                .word 76
                .word 63
                .word 34
                .word 71
                .word 33
                .word 2
                .word 1
                .word 60
                .word 55
                .word 53
                .word 100
                .word 82
                .word 42
                .word 37
                .word 68
                .word 91
                .word 26
                .word 40
                .word 78
                .word 20
                .word 27
                .word 95
                .word 17
                .word 69
                .word 43
                .word 61
                .word 25
                .word 67
                .word 99
                .word 79
                .word 98
                .word 41
                .word 36
                .word 92
                .word 18
                .word 64
                .word 90
                .word 38
                .word 10
                .word 21
                .word 80
                .word 84
                .word 65
                .word 8
                .word 12
                .word 56
                .word 93
                .word 87
                .word 49
                .word 46
                .word 59
                .word 50
                .word 45